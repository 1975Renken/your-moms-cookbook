import React, { useState } from 'react';

const RecipeForm = () => {
  const [formData, setFormData] = useState({
    title: '',
    description: '',
    ingredients: [''],
    instructions: [''],
    category: 'main-dish',
    cookingTime: 30,
    servings: 4,
    image: null
  });

  const categories = [
    'appetizer',
    'main-dish',
    'side-dish',
    'dessert',
    'beverage',
    'bread',
    'breakfast',
    'soup',
    'salad'
  ];

  const handleAddField = (field) => {
    setFormData({
      ...formData,
      [field]: [...formData[field], '']
    });
  };

  const handleFieldChange = (field, index, value) => {
    const newArray = [...formData[field]];
    newArray[index] = value;
    setFormData({
      ...formData,
      [field]: newArray
    });
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    try {
      const response = await fetch('/api/recipes', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(formData),
      });
      if (response.ok) {
        alert('Recipe submitted successfully!');
      }
    } catch (error) {
      console.error('Error submitting recipe:', error);
    }
  };

  return (
    <div className="max-w-2xl mx-auto p-6 bg-white rounded-lg shadow">
      <h2 className="text-2xl font-bold mb-6">Share Your Mom's Recipe</h2>
      
      <form onSubmit={handleSubmit} className="space-y-6">
        <div>
          <label className="block text-sm font-medium mb-2">Recipe Title</label>
          <input
            type="text"
            className="w-full p-2 border rounded"
            value={formData.title}
            onChange={(e) => setFormData({...formData, title: e.target.value})}
            required
          />
        </div>

        <div>
          <label className="block text-sm font-medium mb-2">Description</label>
          <textarea
            className="w-full p-2 border rounded"
            value={formData.description}
            onChange={(e) => setFormData({...formData, description: e.target.value})}
            required
            rows={3}
          />
        </div>

        <div>
          <label className="block text-sm font-medium mb-2">Category</label>
          <select
            className="w-full p-2 border rounded"
            value={formData.category}
            onChange={(e) => setFormData({...formData, category: e.target.value})}
            required
          >
            {categories.map((category) => (
              <option key={category} value={category}>
                {category.charAt(0).toUpperCase() + category.slice(1)}
              </option>
            ))}
          </select>
        </div>

        <div>
          <label className="block text-sm font-medium mb-2">Ingredients</label>
          {formData.ingredients.map((ingredient, index) => (
            <div key={index} className="mb-2">
              <input
                type="text"
                className="w-full p-2 border rounded"
                value={ingredient}
                onChange={(e) => handleFieldChange('ingredients', index, e.target.value)}
                placeholder="e.g., 2 cups flour"
                required
              />
            </div>
          ))}
          <button
            type="button"
            className="text-sm text-blue-600 hover:text-blue-800"
            onClick={() => handleAddField('ingredients')}
          >
            + Add Ingredient
          </button>
        </div>

        <div>
          <label className="block text-sm font-medium mb-2">Instructions</label>
          {formData.instructions.map((instruction, index) => (
            <div key={index} className="mb-2">
              <textarea
                className="w-full p-2 border rounded"
                value={instruction}
                onChange={(e) => handleFieldChange('instructions', index, e.target.value)}
                placeholder={`Step ${index + 1}`}
                required
                rows={2}
              />
            </div>
          ))}
          <button
            type="button"
            className="text-sm text-blue-600 hover:text-blue-800"
            onClick={() => handleAddField('instructions')}
          >
            + Add Step
          </button>
        </div>

        <div className="grid grid-cols-2 gap-4">
          <div>
            <label className="block text-sm font-medium mb-2">Cooking Time (minutes)</label>
            <input
              type="number"
              className="w-full p-2 border rounded"
              value={formData.cookingTime}
              onChange={(e) => setFormData({...formData, cookingTime: parseInt(e.target.value)})}
              min="1"
              required
            />
          </div>
          <div>
            <label className="block text-sm font-medium mb-2">Servings</label>
            <input
              type="number"
              className="w-full p-2 border rounded"
              value={formData.servings}
              onChange={(e) => setFormData({...formData, servings: parseInt(e.target.value)})}
              min="1"
              required
            />
          </div>
        </div>

        <div>
          <label className="block text-sm font-medium mb-2">Recipe Photo</label>
          <input
            type="file"
            accept="image/*"
            className="w-full p-2 border rounded"
            onChange={(e) => setFormData({...formData, image: e.target.files[0]})}
          />
        </div>

        <button
          type="submit"
          className="w-full bg-blue-600 text-white py-2 px-4 rounded hover:bg-blue-700"
        >
          Submit Recipe
        </button>
      </form>
    </div>
  );
};

export default RecipeForm;
